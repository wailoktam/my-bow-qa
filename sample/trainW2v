# !/usr/bin/env python
# -*- coding:utf-8 -*-
import gensim
import os
import re, pprint
import sys
reload(sys)
sys.setdefaultencoding("utf-8")
import site

import unicodedata
import re
import string
import codecs
import kanjinums
#from pyknp import Juman
#from py4j.java_gateway import JavaGateway
from operator import is_not
from functools import partial

#gateway = JavaGateway()

from xml.etree import ElementTree as etree

from gensim.models import word2vec

def pp(obj):
    pp = pprint.PrettyPrinter(indent=4, width=160)
    str = pp.pformat(obj)
    return re.sub(r"\\u([0-9a-f]{4})", lambda x: unichr(int("0x"+x.group(1), 16)), str)

class MySentences(object):



  def __init__(self, dirname):
        self.dirname = dirname

  def __iter__(self):
        lineCounter = 0
        for fname in os.listdir(self.dirname):
             for line in open(os.path.join(self.dirname, fname)):
                lineCounter = lineCounter + 1
                print(str(lineCounter)+":"+str(len(line.split()))+":"+line+"\n")
                yield line.split()
#sentences = MySentences('/mnt/Works/wailoktam/trainingSentences') # a memory-friendly iterator
sentences = word2vec.Text8Corpus('/mnt/Works/wailoktam/trainingSentences/segmentedSentenceList.txt')
model = word2vec.Word2Vec(sentences)
model.save('/home/wailoktam/model')
savedModel = word2vec.Word2Vec.load('/home/wailoktam/model')
#model = Word2Vec.load_word2vec_format('/home/wailoktam/model', unicode_errors='ignore')
out = savedModel.most_similar(positive=[u'冒険'])
vector = model[u'冒険']

print(pp(out[1]))
print (vector)